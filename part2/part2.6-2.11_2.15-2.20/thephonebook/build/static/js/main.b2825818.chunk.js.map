{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","newFilter","handleFilterChange","value","onChange","PersonForm","newName","handleNameChange","newNumber","handleNumberChange","handleSubmit","onSubmit","type","Persons","personsToShow","handleDelete","map","person","i","key","name","number","onClick","id","Notification","newNotification","success","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","axios","get","then","response","data","post","delete","console","log","put","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","setNewNotification","newSuccess","setNewSuccess","useEffect","personsService","filter","toLowerCase","includes","handleNotification","setTimeout","event","target","preventDefault","person_to_replace","find","window","confirm","catch","error","handleUpdate","person_using_number","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b2825818.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({newFilter, handleFilterChange}) =>{\r\n    return(\r\n        <div>\r\n            filter shown with: \r\n            <input value={newFilter} onChange={handleFilterChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = ({newName, handleNameChange, newNumber, handleNumberChange, handleSubmit}) => {\r\n    \r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                name: <input value={newName} onChange={handleNameChange}/>\r\n            </div>\r\n            <div>\r\n                number: <input value={newNumber} onChange={handleNumberChange}/>\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>  \r\n    )\r\n    \r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nconst Persons = ({personsToShow, handleDelete})=>{\r\n    return (\r\n        <div>\r\n            {personsToShow.map((person, i) =>  \r\n            <p key={i}> \r\n            {person.name} {person.number}  <button onClick={()=>handleDelete({id:person.id, name:person.name, number:person.number })}> delete </button>\r\n            </p>\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\n\r\nconst Notification = ({newNotification, success}) =>{\r\n    if (newNotification==='')\r\n        return ''\r\n    const style = {\r\n        color: 'red',\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n      }\r\n    \r\n    if (success)\r\n      style.color = 'green'\r\n    return(\r\n        <div style={style}>\r\n            {newNotification}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n\r\n\r\nconst base_url = '/api/persons'\r\n\r\nconst getAll = () =>\r\n    axios\r\n    .get(base_url)\r\n    .then(\r\n        response => response.data\r\n    )\r\n\r\nconst addNew = ({number, name}) =>{\r\n    return(\r\n        axios\r\n    .post(base_url, {name: name, number: number})\r\n    .then(response=>response.data)\r\n    )\r\n}\r\n\r\nconst deleteEntry = (id) => \r\n    axios\r\n    .delete(base_url+`/${id}`)\r\n\r\nconst update = ({person}) =>{\r\n    console.log(\"here inside update\", person.id)\r\n    const request = axios\r\n    .put(`${base_url}/${person.id}`, person)\r\n    return request.then(response=>response.data)\r\n}\r\n\r\nexport default {getAll, addNew, deleteEntry, update}","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport personsService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ newNotification, setNewNotification ] = useState('')\n  const [ newSuccess, setNewSuccess ] = useState(null)\n\n  useEffect(() => {\n    personsService\n    .getAll()\n    .then(response => setPersons(response))\n  }, [])\n\n  const handleNameChange = (event) => setNewName(event.target.value)  \n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setNewFilter(event.target.value)\n  const personsToShow = newFilter ? persons.filter(person=>person.name.toLowerCase().includes(newFilter)) : persons\n  \n  const handleUpdate = ({person_to_replace}) =>{\n    personsService\n    .update({person:person_to_replace})\n    .then(\n      response=>setPersons(persons.map(person=>person.name===person_to_replace.name ? person_to_replace: person))\n    ).catch(\n      error=>{\n        console.log('error')\n        handleNotification({Notification:`${person_to_replace} does not exist anymore in the phonebook`, success:false})\n      }\n    )\n  }\n  \n  const handleSubmit = (event)=>{\n    event.preventDefault()\n    const person_to_replace = persons.find((person)=>person.name===newName)\n    \n    console.log(person_to_replace)\n    if (typeof person_to_replace !== 'undefined' && person_to_replace.number!==newNumber){\n      if (window.confirm(`${person_to_replace.name} is already added to phonebook, replace the old number with a new one?`)) { \n        person_to_replace.number=newNumber\n        console.log(person_to_replace)\n        handleUpdate({person_to_replace})\n        handleNotification({Notification:`Updated ${person_to_replace.name}'s number`, success:true})\n      }\n    }\n    else if (persons.map((person)=>person.number).includes(newNumber)){\n      const person_using_number = persons.find((person)=>person.number===newNumber)\n      handleNotification({Notification:`The number: ${newNumber} is already registered under ${person_using_number.name}`, success:false})\n    }\n    else{\n      personsService\n      .addNew({name:newName, number:newNumber})\n      .then(response=>{\n        setPersons(persons.concat(response))\n        handleNotification({Notification:`Added ${newName} successfully`, success:true})\n      })\n      .catch(error=>{\n        handleNotification({Notification:`failed: ${error.response.data}`, success:false})\n      })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleDelete = ({id ,name , number}) =>{\n    if (window.confirm(`Delete ${name}?`)) { \n      personsService\n      .deleteEntry(id).catch(\n        error=>{\n          console.log('error')\n          handleNotification({Notification:`${name} does not exist anymore in the phonebook`, success:false})\n        }\n      )\n      setPersons(persons.filter(person=>(person.name!==name && person.number!==number)))\n      console.log('deleted', name)\n      handleNotification({Notification:`Deleted ${name} successfully`, success:true})\n    }\n  }\n\n  const handleNotification = ({Notification, success}) =>{\n      setNewNotification(Notification)\n      setNewSuccess(success)\n      setTimeout(() => {\n        setNewNotification('')\n        setNewSuccess(null)\n      }, 5000)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification newNotification={newNotification} success={newSuccess}/>\n        <Filter newFilter={newFilter} handleFilterChange={handleFilterChange}/>\n      <h2>add a new</h2>\n      <PersonForm newName={newName} handleNameChange={handleNameChange} \n      newNumber={newNumber} handleNumberChange={handleNumberChange} \n      handleSubmit={handleSubmit}\n      />\n      <h2>Numbers</h2>\n      <Persons personsToShow={personsToShow} handleDelete={handleDelete}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}